/* DO NOT EDIT: automatically built by dist/s_include. */
#ifndef	_dbsql_ext_h_
#define	_dbsql_ext_h_

#if defined(__cplusplus)
extern "C" {
#endif

int __init_databases __P((DBSQL *, char**));
int __sqldb_init __P((dbsql_db_t *, DBSQL *, const char *, int, int, int));
void __api_interrupt __P((DBSQL *));
int __api_get_table __P((DBSQL *, const char *, char ***, int *, int *, char **));
void __api_free_table __P((char **));
void __attach __P((parser_t *, token_t *, token_t *));
void __detach __P((parser_t *, token_t *));
int __ref_normalizer_ctx_init __P((ref_normalizer_ctx_t *, parser_t *, int, const char *, const token_t *));
int __ref_normalize_src_list __P((ref_normalizer_ctx_t *, src_list_t *));
int __ref_normalize_select __P((ref_normalizer_ctx_t *, select_t *));
int __ref_normalize_expr __P((ref_normalizer_ctx_t *, expr_t *));
int __ref_normalize_expr_list __P((ref_normalizer_ctx_t *, expr_list_t *));
int __ref_normalize_trigger_step __P((ref_normalizer_ctx_t *, trigger_step_t *));
int __api_set_authorizer __P((DBSQL *, int (*auth)(void*,int,const char*, const char*,const char*, const char*), void *));
void __auth_read __P((parser_t *, expr_t *, src_list_t *));
int __auth_check __P((parser_t *, int, const char *, const char *, const char *));
void __auth_context_push __P((parser_t *, auth_context_t *, const char *));
void __auth_context_pop __P((auth_context_t *));
void __parse_begin __P((parser_t *, int));
void __parse_exec __P((parser_t *));
table_t *__find_table __P((DBSQL *, const char *, const char *));
table_t *__locate_table __P((parser_t *, const char *, const char *));
index_t *__find_index __P((DBSQL *, const char *, const char *));
void __unlink_and_delete_index __P((DBSQL *, index_t *));
void __reset_internal_schema __P((DBSQL *, int));
void __rollback_internal_changes __P((DBSQL *));
void __commit_internal_changes __P((DBSQL *));
void __vdbe_delete_table __P((DBSQL *, table_t *));
char *__table_name_from_token __P((token_t *));
void __open_master_table __P((vdbe_t *, int));
void __start_table __P((parser_t *, token_t *, token_t *, int, int));
void __add_column __P((parser_t *, token_t *));
void __add_not_null __P((parser_t *, int));
void __add_column_type __P((parser_t *, token_t *, token_t *));
void __add_default_value __P((parser_t *, token_t *, int));
void __add_primary_key __P((parser_t *, id_list_t *, int));
int __collate_type __P((const char *, int));
void __add_collate_type __P((parser_t *, int));
void __change_schema_signature __P((DBSQL *, vdbe_t *));
void __ending_create_table_paren __P((parser_t *, token_t *, select_t *));
void __create_view __P((parser_t *, token_t *, token_t *, select_t *, int));
int __view_get_column_names __P((parser_t *, table_t *));
table_t *__table_from_token __P((parser_t *, token_t *));
void __drop_table __P((parser_t *, token_t *name, int));
void __add_idx_key_type __P((vdbe_t *, index_t *));
void __create_foreign_key __P((parser_t *, id_list_t *, token_t *, id_list_t *, int));
void __defer_foreign_key __P((parser_t *, int));
void __create_index __P((parser_t *, token_t *, src_list_t *, id_list_t *, int, token_t *, token_t *));
id_list_t *__id_list_append __P((id_list_t *, token_t *));
src_list_t *__src_list_append __P((src_list_t *, token_t *, token_t *));
void __src_list_add_alias __P((src_list_t *, token_t *));
void __id_list_delete __P((id_list_t *));
int __id_list_index __P((id_list_t *, const char *));
void __src_list_delete __P((src_list_t *));
void __dbsql_txn_begin __P((parser_t *, int));
void __dbsql_txn_commit __P((parser_t *));
void __dbsql_txn_abort __P((parser_t *));
void __code_verify_schema __P((parser_t *, int));
void __vdbe_prepare_write __P((parser_t*, int, int));
void __vdbe_conclude_write __P((parser_t *));
void __copy __P((parser_t *, src_list_t *, token_t *, token_t *, int));
void __register_datetime_funcs __P((DBSQL *));
table_t *__src_list_lookup __P((parser_t *, src_list_t *));
int __is_table_read_only __P((parser_t *, table_t *, int));
void __delete_from __P((parser_t *, src_list_t *, expr_t *));
void __generate_row_delete __P((DBSQL *, vdbe_t *, table_t *, int, int));
void __generate_row_index_delete __P((DBSQL *, vdbe_t *, table_t *, int, char *));
expr_t *__expr __P((int, expr_t *, expr_t *, token_t *));
void __expr_span __P((expr_t *, token_t *, token_t *));
expr_t *__expr_function __P((expr_list_t *, token_t *));
void __expr_delete __P((expr_t *));
expr_t *__expr_dup __P((expr_t *));
void __token_copy __P((token_t *, token_t *));
expr_list_t *__expr_list_dup __P((expr_list_t *));
src_list_t *__src_list_dup __P((src_list_t *));
id_list_t *__id_list_dup __P((id_list_t *));
select_t *__select_dup __P((select_t *));
expr_list_t *__expr_list_append __P((expr_list_t *, expr_t *, token_t *));
void __expr_list_delete __P((expr_list_t *));
int __expr_is_constant __P((expr_t *));
int __expr_is_integer __P((expr_t *, int *));
int __is_row_id __P((const char *));
int __expr_resolve_ids __P((parser_t *, src_list_t *, expr_list_t *, expr_t *));
int __expr_check __P((parser_t *, expr_t *, int, int *));
int __expr_type __P((expr_t *));
void __expr_code __P((parser_t *, expr_t *));
void __expr_if_false __P((parser_t *, expr_t *, int, int));
int __expr_compare __P((expr_t *, expr_t *));
int __expr_analyze_aggregates __P((parser_t *, expr_t *));
func_def_t *__find_function __P((DBSQL *, const char *, int, int, int));
void __insert __P((parser_t *, src_list_t *, expr_list_t *, select_t *, id_list_t *, int));
void __generate_constraint_checks __P((parser_t *, table_t *, int, char *, int, int, int, int));
void __complete_insertion __P((parser_t *, table_t *, int, char *, int, int, int));
void __pragma __P((parser_t *, token_t *, token_t *, int));
select_t *__select_new __P((expr_list_t *, src_list_t *, expr_t *, expr_list_t *, expr_t *, expr_list_t *, int, int, int));
int __join_type __P((parser_t *, token_t *, token_t *, token_t *));
void __select_delete __P((select_t *));
void __add_key_type __P((vdbe_t *, expr_list_t *));
void __select_unbind __P((select_t *));
vdbe_t *__parser_get_vdbe __P((parser_t *));
int __select __P((parser_t *, select_t *, int, int, select_t *, int, int *));
table_t *__select_result_set __P((parser_t *, char *, select_t *));
void __vdbe_delete_trigger_step __P((trigger_step_t *));
void __begin_trigger __P((parser_t *, token_t *, int, int, id_list_t *, src_list_t *, int, expr_t *, int));
void __finish_trigger __P((parser_t *, trigger_step_t *, token_t *));
trigger_step_t * __trigger_select_step __P((select_t *));
trigger_step_t *__trigger_insert_step __P((token_t *, id_list_t *, expr_list_t *, select_t *, int));
trigger_step_t *__trigger_update_step __P((token_t *, expr_list_t *, expr_t *, int));
trigger_step_t *__trigger_delete_step __P((token_t *, expr_t *));
void __vdbe_delete_trigger __P((trigger_t *));
void __drop_trigger __P((parser_t *, src_list_t *));
void __drop_trigger_ptr __P((parser_t *, trigger_t *, int));
int __triggers_exist __P((parser_t *, trigger_t *, int, int, int, expr_list_t *));
void __update __P((parser_t *, src_list_t *, expr_list_t *, expr_t *, int));
void __vacuum __P((parser_t *, token_t *));
int __execute_vacuum __P((char **, DBSQL *));
int __execute_vacuum __P((char **, DBSQL *));
where_info_t *__where_begin __P((parser_t *, src_list_t *, expr_t *, int, expr_list_t **));
void __where_end __P((where_info_t *));
int __safety_on __P((DBSQL *));
int __safety_off __P((DBSQL *));
int __safety_check __P((DBSQL *));
int __sm_bt_compare __P((DB *, const DBT *, const DBT *));
int __sm_create __P((DBSQL *, const char *, int, int, sm_t **));
int __sm_close_db __P((sm_t *));
int __sm_checkpoint __P((sm_t *));
char *__sm_get_database_name __P((sm_t *));
int __sm_begin_txn __P((sm_t *));
int __sm_commit_txn __P((sm_t *));
int __sm_abort_txn __P((sm_t *));
int __sm_cursor __P((sm_t *, int, int, sm_cursor_t **));
int __sm_close_cursor __P((sm_cursor_t *));
int __sm_moveto __P((sm_cursor_t *, const void *, int, int *));
int __sm_next __P((sm_cursor_t *, int *));
int __sm_prev __P((sm_cursor_t *, int *));
int __sm_key_size __P((sm_cursor_t *, int *));
int __sm_data_size __P((sm_cursor_t *, int *));
int __sm_key_compare __P((sm_cursor_t *, const void *, int, int, int *));
size_t __sm_key __P((sm_cursor_t *, size_t, size_t, const void *));
size_t __sm_data __P((sm_cursor_t *, size_t, size_t, char *));
int __sm_first __P((sm_cursor_t *, int *));
int __sm_last __P((sm_cursor_t *, int *));
int __sm_insert __P((sm_cursor_t *, const void *, int, const void *, int));
int __sm_delete __P((sm_cursor_t *));
int __sm_drop_table __P((sm_t *, int));
int __sm_clear_table __P((sm_t *, int));
int __sm_open_table __P((sm_t *, int *));
int __sm_create_table __P((sm_t *, int *));
int __sm_create_index __P((sm_t *, int *));
int __sm_set_format_version __P((sm_t *, int, u_int32_t));
int __sm_get_format_version __P((sm_t *, u_int32_t *));
int __sm_set_schema_sig __P((sm_t *, u_int32_t));
int __sm_get_schema_sig __P((sm_t *, u_int32_t *));
void __register_builtin_funcs __P((DBSQL *));
int get_keyword_code __P((const char *, int));
int __run_sql_parser __P((parser_t *, const char *, char **));
int __api_step __P((dbsql_stmt_t *, int *, const char ***, const char ***));
int __vdbe_exec __P((vdbe_t *));
vdbe_t *__vdbe_create __P((DBSQL *));
void __vdbe_trace __P((vdbe_t *, FILE *));
int __vdbe_add_op __P((vdbe_t *, int, int, int));
int __vdbe_make_label __P((vdbe_t *));
void __vdbe_resolve_label __P((vdbe_t *, int));
int __vdbe_current_addr __P((vdbe_t *));
int __vdbe_add_op_list __P((vdbe_t *, int, const vdbe_op_t *));
void __vdbe_change_p1 __P((vdbe_t *, int, int));
void __vdbe_change_p2 __P((vdbe_t *, int, int));
void __vdbe_change_p3 __P((vdbe_t *, int, const char *, int));
void __vdbe_dequote_p3 __P((vdbe_t *, int));
void __vdbe_compress_space __P((vdbe_t *, int));
int __vdbe_find_op __P((vdbe_t *, int, int));
vdbe_op_t *__vdbe_get_op __P((vdbe_t *, int));
void __vdbe_print_op __P((FILE *, int, vdbe_op_t *));
int __vdbe_list __P((vdbe_t *));
void __vdbe_make_ready __P((vdbe_t *, int, dbsql_callback, void *, int));
void __vdbe_sorter_reset __P((vdbe_t *));
void __vdbe_agg_reset __P((agg_t *));
void __vdbe_keylist_free __P((keylist_t *));
void __vdbe_cleanup_cursor __P((cursor_t *));
int __vdbe_reset __P((vdbe_t *, char **));
int __vdbe_finalize __P((vdbe_t *, char **));
int __api_bind __P((dbsql_stmt_t *, int, const char *, int, int));
void __vdbe_delete __P((vdbe_t *));
int __vdbe_byte_swap __P((int));
int __vdbe_cursor_moveto __P((cursor_t *));

#if defined(__cplusplus)
}
#endif
#endif /* !_dbsql_ext_h_ */

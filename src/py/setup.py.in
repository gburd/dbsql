# setup.py: the distutils script
#
# DBSQL - A SQL database engine.
#
# Copyright (C) 2007-2008  The DBSQL Group, Inc. - All rights reserved.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# There are special exceptions to the terms and conditions of the GPL as it
# is applied to this software. View the full text of the exception in file
# LICENSE_EXCEPTIONS in the directory of this software distribution.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# Copyright (C) 2004-2006 Gerhard Häring <gh@ghaering.de>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

import glob, os, re, sys

from distutils.core import setup, Extension, Command

# If you need to change anything, it should be enough to change setup.cfg.

dbsql = "dbsql"

_dbsql_loc = "@prefix@"
_db_loc = "@DB_PATH@"
_conf_path = "@CONFIGURATION_PATH@"

sources = ["src/module.c", "src/connection.c", "src/cursor.c", "src/cache.c",
           "src/microprotocols.c", "src/prepare_protocol.c", "src/statement.c",
           "src/util.c", "src/row.c"]

include_dirs = [_conf_path,
                _dbsql_loc + "/include",
                _db_loc + "/include"]
library_dirs = [_conf_path + "/.libs",
                _dbsql_loc + "/libs",
                _db_loc + "/libs"]
libraries = ["db", "dbsql"]
runtime_library_dirs = [_dbsql_loc + "/libs",
                _db_loc + "/libs"]
extra_objects = []
define_macros = []

long_description = \
"""Python interface to DBSQL

pydbsql is an interface to the DBSQL embedded relational database engine.
It is almost fully compliant with the Python database API version 2.0 while
exposing most of the unique features of DBSQL."""

if sys.platform != "win32":
    define_macros.append(('MODULE_NAME', '"pydbsql.dbapi2"'))
else:
    define_macros.append(('MODULE_NAME', '\\"pydbsql.dbapi2\\"'))

class DocBuilder(Command):
    description = "Builds the documentation"
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        import os, stat

        try:
            import docutils.core
            import docutilsupport
        except ImportError:
            print "Error: the build-docs command requires docutils and SilverCity to be installed"
            return

        docfiles = {
            "usage-guide.html": "usage-guide.txt",
            "install-source.html": "install-source.txt",
            "install-source-win32.html": "install-source-win32.txt"
        }

        os.chdir("doc")
        for dest, source in docfiles.items():
            if not os.path.exists(dest) or os.stat(dest)[stat.ST_MTIME] < os.stat(source)[stat.ST_MTIME]:
                print "Building documentation file %s." % dest
                docutils.core.publish_cmdline(
                    writer_name='html',
                    argv=["--stylesheet=default.css", source, dest])

        os.chdir("..")

def get_setup_args():
    PYDBSQL_VERSION = None
    PYDBSQL_MAJOR_VERSION = None
    PYDBSQL_MINOR_VERSION = None
    PYDBSQL_PATCH_VERSION = None

    version_re = re.compile('#define PYDBSQL_VERSION "(.*)"')
    f = open(os.path.join("src", "module.h"))
    for line in f:
        match = version_re.match(line)
        if match:
            PYDBSQL_VERSION = match.groups()[0]
            PYDBSQL_MAJOR_VERSION = PYDBSQL_VERSION.split('.')[0]
            PYDBSQL_MINOR_VERSION = PYDBSQL_VERSION.split('.')[1]
            PYDBSQL_PATCH_VERSION = PYDBSQL_VERSION.split('.')[2]
            break
    f.close()

    if not PYDBSQL_VERSION:
        print "Fatal error: PYDBSQL_VERSION could not be detected!"
        sys.exit(1)

    data_files = [("pydbsql-doc",
                        glob.glob("doc/*.html") \
                      + glob.glob("doc/*.txt") \
                      + glob.glob("doc/*.css")),
                   ("pydbsql-doc/code",
                        glob.glob("doc/code/*.py"))]

    py_modules = ["dbsql"]
    setup_args = dict(
            name = "pydbsql",
            version = PYDBSQL_VERSION,
            description = "DB-API 2.0 interface for DBSQL 1.x",
            long_description=long_description,
            author = "The DBSQL Group, Inc.",
            author_email = "info@dbsql.org",
            license = "GPL",
            platforms = "ALL",
            url = "http://dbsql.org/",
            download_url = "http://download.dbsql.org/dbsql-%s.tar.gz" %\
                           (PYDBSQL_VERSION),

            # Description of the modules and packages in the distribution
            package_dir = {"pydbsql": "pydbsql"},
            packages = ["pydbsql", "pydbsql.test"],
            scripts=[],
            data_files = data_files,

            ext_modules = [Extension(name="pydbsql._dbsql",
                                     sources=sources,
                                     include_dirs=include_dirs,
                                     library_dirs=library_dirs,
                                     runtime_library_dirs=runtime_library_dirs,
                                     libraries=libraries,
                                     extra_objects=extra_objects,
                                     define_macros=define_macros
                                     )],
            classifiers = [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: GPL",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: Microsoft :: Windows",
            "Operating System :: POSIX",
            "Programming Language :: C",
            "Programming Language :: Python",
            "Topic :: Database :: Database Engines/Servers",
            "Topic :: Software Development :: Libraries :: Python Modules"]
            )
    return setup_args

def main():
    setup(**get_setup_args())

if __name__ == "__main__":
    main()
